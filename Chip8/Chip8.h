#ifndef CHIP8_H
#define CHIP8_H

#include <fstream>
#include <stack>
#include <chrono>

using namespace std;

enum Chip8Types { CHIP8, CHIP8_HiRes, CHIP8_HiRes2, SCHIP8, MCHIP8 };
enum Chip8ColorTheme { DEFAULT, INVERSE, GAMEBOY, C64, RED, GREEN, BLUE };

struct TCOLOR {
    unsigned int foreColor;
    unsigned int backColor;
};

#define byte unsigned char

#define getNanoFromHertz(h)     (((double)1.0/h) * 1000) * 1000000)
#define getMicroFromHertz(h)    (((double)1.0/h) * 1000000)
#define getMilliFromHertz(h)    (((double)1.0/h) * 1000)
#define getSecondsFromHertz(h)  ((double)1.0/h)
#define getR(color)             ((color >> 16) & 0xFF)
#define getG(color)             ((color >> 8) & 0xFF)
#define getB(color)             (color & 0xFF)
#define getRGB(R, G, B)         (R << 16) | (G << 8) | B

// Original Chip-8 Frequencies according to various docs
// CPU Frequency (COSMAC VIP)
const float    BASE_FREQ     = 1760;
// Clock Frequency 60Hz
const float    BASE_CLOCK    = 60;
const double   BASE_CLOCK_MS = (1/BASE_CLOCK) * 1000;
const double   BASE_CLOCK_NS = BASE_CLOCK_MS * 1000000;

// Chip-8 & SChip-8 font set
const byte Chip8Font[240] =
{
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F

    // S-Chip-8
    0xF0, 0xF0, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xF0, 0xF0, // 0
    0x20, 0x20, 0x60, 0x60, 0x20, 0x20, 0x20, 0x20, 0x70, 0x70, // 1
    0xF0, 0xF0, 0x10, 0x10, 0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, // 2
    0xF0, 0xF0, 0x10, 0x10, 0xF0, 0xF0, 0x10, 0x10, 0xF0, 0xF0, // 3
    0x90, 0x90, 0x90, 0x90, 0xF0, 0xF0, 0x10, 0x10, 0x10, 0x10, // 4
    0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, 0x10, 0x10, 0xF0, 0xF0, // 5
    0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, 0x90, 0x90, 0xF0, 0xF0, // 6
    0xF0, 0xF0, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x40, 0x40, // 7
    0xF0, 0xF0, 0x90, 0x90, 0xF0, 0xF0, 0x90, 0x90, 0xF0, 0xF0, // 8
    0xF0, 0xF0, 0x90, 0x90, 0xF0, 0xF0, 0x10, 0x10, 0xF0, 0xF0, // 9
    0xF0, 0xF0, 0x90, 0x90, 0xF0, 0xF0, 0x90, 0x90, 0x90, 0x90, // A
    0xE0, 0xE0, 0x90, 0x90, 0xE0, 0xE0, 0x90, 0x90, 0xE0, 0xE0, // B
    0xF0, 0xF0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xF0, 0xF0, // C
    0xE0, 0xE0, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xE0, 0xE0, // D
    0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, // E
    0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, 0x80, 0x80, 0x80, 0x80  // F
};

// FakeBios - Chip8 emulator Logo [Garstyciuks] (Cmd: xxd -i "file" > "file.h")
const unsigned char bios_ch8[] = {
  0x00, 0xe0, 0x60, 0x00, 0x61, 0x00, 0x62, 0x08, 0xa2, 0x20, 0x40, 0x40,
  0x22, 0x1a, 0x41, 0x20, 0x12, 0x10, 0xd0, 0x18, 0xf2, 0x1e, 0x70, 0x08,
  0x12, 0x0a, 0x60, 0x00, 0x71, 0x08, 0x00, 0xee, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x7f, 0x40, 0x5f, 0x50, 0x57, 0x54, 0x54, 0x00, 0xfc, 0x04, 0xf4,
  0x14, 0xd4, 0x54, 0x54, 0x00, 0x3f, 0x20, 0x2f, 0x28, 0x2b, 0x2a, 0x2a,
  0x00, 0xfe, 0x02, 0xfa, 0x0a, 0xea, 0x2a, 0x2a, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x74, 0x00,
  0x54, 0x54, 0x54, 0x54, 0x74, 0x00, 0x00, 0x00, 0x2a, 0x2a, 0x2a, 0x2a,
  0x2a, 0x2a, 0x3b, 0x00, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0xee, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x54, 0x54, 0x54,
  0x54, 0x54, 0x54, 0x54, 0x00, 0x00, 0x74, 0x54, 0x54, 0x54, 0x54, 0x54,
  0x3b, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0xee, 0x2a, 0x2a, 0x2a,
  0x2a, 0x2a, 0x2a, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x54, 0x54, 0x57, 0x50, 0x5f, 0x40, 0x7f, 0x00, 0x54, 0x54, 0xd4, 0x14,
  0xf4, 0x04, 0xfc, 0x00, 0x2a, 0x2a, 0x2b, 0x28, 0x2f, 0x20, 0x3f, 0x00,
  0x2a, 0x2a, 0xea, 0x0a, 0xfa, 0x02, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned int bios_ch8_len = 288;

const unsigned char keypad_ch8[] = {
  0x12, 0x4e, 0x08, 0x19, 0x01, 0x01, 0x08, 0x01, 0x0f, 0x01, 0x01, 0x09,
  0x08, 0x09, 0x0f, 0x09, 0x01, 0x11, 0x08, 0x11, 0x0f, 0x11, 0x01, 0x19,
  0x0f, 0x19, 0x16, 0x01, 0x16, 0x09, 0x16, 0x11, 0x16, 0x19, 0xfc, 0xfc,
  0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x00, 0xa2, 0x02, 0x82, 0x0e, 0xf2, 0x1e,
  0x82, 0x06, 0xf1, 0x65, 0x00, 0xee, 0xa2, 0x02, 0x82, 0x0e, 0xf2, 0x1e,
  0x82, 0x06, 0xf1, 0x55, 0x00, 0xee, 0x6f, 0x10, 0xff, 0x15, 0xff, 0x07,
  0x3f, 0x00, 0x12, 0x46, 0x00, 0xee, 0x00, 0xe0, 0x62, 0x00, 0x22, 0x2a,
  0xf2, 0x29, 0xd0, 0x15, 0x70, 0xff, 0x71, 0xff, 0x22, 0x36, 0x72, 0x01,
  0x32, 0x10, 0x12, 0x52, 0xf2, 0x0a, 0x22, 0x2a, 0xa2, 0x22, 0xd0, 0x17,
  0x22, 0x42, 0xd0, 0x17, 0x12, 0x64
};
const unsigned int keypad_ch8_len = 114;


// Some size constants depending on machine
class BaseCHIP8 {
    public:
        void BaseChip8() {
            //setType(type);
            _colorTheme = DEFAULT;
            _inverseColor  = false;
        };

        bool getInverseColor() { return _inverseColor; }
        Chip8ColorTheme getColorTheme() { return _colorTheme; }
        Chip8Types getType() { return _type; }
        unsigned short getWidth() { return _width; }
        unsigned short getHeight() { return _height; }
        unsigned short getBytesPerPixel() { return _bytesPerPixel; }
        unsigned long getScreenSizeOf() { return (_width * _height * _bytesPerPixel); }

    protected:

        void setColorTheme(Chip8ColorTheme value) { _colorTheme = value; }
        void setInverseColor(bool value) { _inverseColor = value; }

        TCOLOR getColor(Chip8ColorTheme color) {
            TCOLOR tCol;

            switch (color) {
            case INVERSE:
                tCol.foreColor = 0;
                tCol.backColor = 0xFFFFFF;
                break;

            case GAMEBOY:
                tCol.foreColor = 0x103F10;
                tCol.backColor = 0x9CB916;
                break;

            case C64:
                tCol.foreColor = 0x11BCFF;
                tCol.backColor = 0x0019FF;
                break;

            case RED:
                tCol.foreColor = 0xFF0000;
                tCol.backColor = 0;
                break;

            case GREEN:
                tCol.foreColor = 0xFF000;
                tCol.backColor = 0;
                break;

            case BLUE:
                tCol.foreColor = 0xFF;
                tCol.backColor = 0x000000;
                break;

            case DEFAULT:
            default:
                tCol.foreColor = 0xFFFFFF;
                tCol.backColor = 0;
                break;
            }
            if (_inverseColor) {
                tCol.foreColor = tCol.foreColor + tCol.backColor;
                tCol.backColor = tCol.foreColor - tCol.backColor;
                tCol.foreColor = tCol.foreColor - tCol.backColor;
            }
            return tCol;
        }

        void setType(Chip8Types Type) {
            _bytesPerPixel = 4;
            _type = Type;
            switch (Type) {
                case CHIP8:
                    _width = 64;
                    _height = 32;
                    break;
                case CHIP8_HiRes2:
                    _width = 64;
                    _height = 48;
                    break;
                case CHIP8_HiRes:
                    _width = 64;
                    _height = 64;
                    break;
                case SCHIP8:
                    _width = 128;
                    _height = 64;
                    break;
                case MCHIP8:
                    _width = 256;
                    _height = 192;
                    break;
            }
        }

    private:
        unsigned short _width;
        unsigned short _height;
        byte  _bytesPerPixel;
        Chip8Types _type;
        Chip8ColorTheme _colorTheme;
        bool _inverseColor;
};

class Chip8: public BaseCHIP8
{
    public:

        Chip8();
        virtual ~Chip8();

        // Accesseurs - Display
        unsigned char *getScreen() { return _gfx; };

        // Keyboard
        bool getKey(unsigned char key) { return _key[key]; }
        void setKey(unsigned char key, bool value) { _key[key] = value; }

        // Timers
        unsigned char timerSound() { return _timerSound; }
        unsigned char timerDelay() { return _timerDelay; }

        // Others
        void setColorTheme(Chip8ColorTheme value);
        void setInverseColor(bool value);
        bool getSyncClockToOriginal() { return _syncClockToOriginal; }
        void SetSyncClockToOriginal(bool value) { _syncClockToOriginal = value; }
        void ChangeMachineType(Chip8Types Type);
        bool loaded() { return _loaded; }
        void initialize(Chip8Types Type);
        void reset();
        bool loadGame(const char *filename);
        void loadBios();
        void loadKeypad() ;
        void execute(double frequencyInMs);
        bool isRunning() { return _isRunning; }

    private:

        bool _loaded;
        bool _isRunning;

        // Does the clock follow the CPU Frequency or it stick to the base frequency of 60 Hz ?
        bool _syncClockToOriginal;

        // Current instruction
        unsigned short _opcode;

        /* Memory Map
            0x000-0x1FF - Chip 8 interpreter (contains font set in emu)
            0x050-0x0A0 - Used for the built in 4x5 pixel font set (0-F)
            0x200-0xFFF - Program ROM and work RAM
        */
        /* Chip 8 4096 */
        unsigned char _memory[4096];

        // 16 registers
        unsigned char _V[16];
        // HP48 Registers (8) - Opcodes FX75 & FX85 - Compatibility
        unsigned char _V48[8];

        // Index register
        /* Chip 8 short - MChip8 int */
        unsigned short _I;

        // Program Counter [0x000 .. 0xFFF]
        /* Chip 8 short - MChip8 int */
        unsigned short _pc;

        // Graphic 64 * 32 pixels
        unsigned char *_gfx;

        // Timers at 60 Hz;
        unsigned char _timerDelay;
        unsigned char _timerSound;

        // Stack
        stack<unsigned short> _callStack;
        //unsigned short _stack[16];
        //unsigned short _sp;

        // Keys
        bool _key[16];

        // functions
        void refreshScreen(TCOLOR colorFrom, TCOLOR colorTo);
        void UpdateScreen(unsigned char X, unsigned char Y, unsigned char K);
        void loadFont();
        void load(char *rom, unsigned int size);
        void clearGfx();
};

#endif // CHIP8_H
